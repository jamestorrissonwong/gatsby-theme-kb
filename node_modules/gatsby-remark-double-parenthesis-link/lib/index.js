"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const unist_util_visit_1 = __importDefault(require("unist-util-visit"));
const slugify_1 = __importDefault(require("slugify"));
/**
 * if title is something like `folder1/folder2/name`,
 * will slugify the name, while keeping the folder names
 */
const defaultTitleToURLPath = (title) => {
    const segments = title.split("/");
    const slugifiedTitle = slugify_1.default(segments.pop());
    return `${segments.join("/")}/${slugifiedTitle}`;
};
// Find matches for content between double parenthesis
// e.g. ((Example)) -> Example
const parenthesisRegexExclusive = /(?<=\(\().*?(?=\)\))/g;
const addDoubleParenthesisLinks = ({ markdownAST }, options) => {
    const idToURL = (options === null || options === void 0 ? void 0 : options.idToURL) || defaultTitleToURLPath;
    unist_util_visit_1.default(markdownAST, `text`, (node, index, parent) => {
        const value = node.value;
        if (typeof value !== "string" ||
            !parent ||
            !index ||
            !Array.isArray(parent.children)) {
            return;
        }
        const matches = value.match(parenthesisRegexExclusive);
        if (!matches) {
            return;
        }
        const children = [value];
        matches.forEach((match) => {
            const last = children.pop();
            if (typeof last !== "string") {
                return;
            }
            const split = `((${match}))`;
            const [first, ...rest] = last.split(split);
            children.push(first, { id: match }, rest.join(split));
        });
        parent.children.splice(index, 1, ...children.map((child) => {
            if (typeof child === "string") {
                return {
                    type: "text",
                    value: child,
                };
            }
            return {
                type: "link",
                url: idToURL(child.id),
                title: `__roam_block_${child.id}`,
                children: [{ type: "text", value: child.id }],
            };
        }));
    });
};
exports.default = addDoubleParenthesisLinks;
